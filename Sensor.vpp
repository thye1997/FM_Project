class Sensor

	types
		
		public Status = <Vacant> | <Occupied>;
		public distance = real;
		public Floor = <Floor1> | <Floor2> | <Floor3>;
		public sensorType = <Parking> | <Dispenser>;
		public sensorDist = map sensorType to distance;
		public Sensor:: sensorName: sensorType
						sensorDistance: distance;
		
		public LotSensor = map nat1 to Status;
		public sensorList = map nat to seq of seq of char;
		public sensorDistList = map nat1 to nat1;

	instance variables
		private lotSensor : LotSensor := { 1 |-> <Vacant> };

		private sensorTypes: map sensorType to seq of char := {<Parking> |-> "Parking Lot Sensor", <Dispenser> |-> "Dispenser Sensor"};
		public sensorDistance: sensorDist:= {<Dispenser> |-> 100, <Parking> |-> 50}; --unit in cm
		private sensor: Sensor;	
		public objDist : distance;
		public carAtDispenser : bool;
		public carAtParking : bool;
		public occupied: bool:= false;
		
	values
		public scannedDist : distance = 100;
		
	operations
		public isCarExist : ()==> bool
			isCarExist()== (
				return true;
			);	
	
		public getScannedObjDist : () ==> real
			getScannedObjDist () == (
				return objDist;
			);
			
		public setScannedObjDist : real ==> ()
			setScannedObjDist (input) == (
				objDist := input;
			);
			
		public scanForObject : sensorType ==> ()
			scanForObject (sType) == (
				cases sType:
					<Dispenser> -> (
							if objDist <= sensorDistance(sType)
								then carAtDispenser := true;
							),
					<Parking> -> (
							if objDist <= sensorDistance(sType)
								then carAtParking := true;
							)

					end;
			);
end Sensor