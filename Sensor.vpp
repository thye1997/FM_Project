class Sensor

types
public LotSensor = map nat1 to seq of char;

public sensorType = map seq of char to seq of char;
public sensorDist = map seq of char to nat;
public Sensor::
	sensorName: seq of char
	sensorDistance: seq of char;

public sensorList = map nat to seq of seq of char;
public sensorDistList = map nat1 to nat1;		

instance variables
private lotSensor : LotSensor := { 1 |-> "vacant" };

private sensorTypes: sensorType :={"Dispenser" |-> "Dispense Sensor", "Lot"|->"Lot Sensor"};
private sensorDistance: sensorDist:= {"Dispenser" |-> 10, "Lot"|-> 2};
public isCarpark: bool:= false;
private dispenser: Dispenser:= new Dispenser();

private sensor: Sensor;	
operations
public getLotSensor : nat1 ==> seq of char
getLotSensor (lot) == (
return sensorTypes(lot);
);


public carDistance: nat * seq of char ==> seq of char
carDistance(dist,type)==
( 

-- for dispense sensor is in "cm", lot sensor is in "meter"
if sensor.sensorName = sensorTypes(type)
  then
 (if dist <= sensor.sensorDistance and sensor.sensorName = sensorTypes("Dispenser")
	then 
	(dispenser.dispenseTicket(true);)--if car near dispenser
        else if dist<= sensor.sensorDistance and sensor.sensorName = sensorTypes("Lot")
	then (return ;)--if car near parking lot
	else (return ;)
 )--end of 1st if
);

public carAtDispense: nat ==> Ticket`Ticket
carAtDispense(dist)==
(
sensor:=mk_Sensor(sensorTypes("Dispenser"), sensorDistance("Dispenser"));
if dist <= sensor.sensorDistance
	then 
	(dispenser.dispenseTicket(true);)--if car near dispenser
	else
	(dispenser.dispenseTicket(false);)
);

public carAtParking: nat ==> bool
carAtParking(dist)==
(
sensor:=mk_Sensor(sensorTypes("Lot"), sensorDistance("Lot"));
if dist <= sensor.sensorDistance
	then 
	(isCarPark(true);)--if car near lot
	else
	(isCarPark(false);)
);

public isCarExist : ()==> bool
isCarExist()==
(
 return true;
);
public isCarPark : bool ==>bool
isCarPark(val)==
(
isCarpark:= val;
return val;
);		
-- public detectLot
	
end Sensor